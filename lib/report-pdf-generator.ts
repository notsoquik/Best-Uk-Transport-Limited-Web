import jsPDF from "jspdf"
import type { FuelRecord } from "./storage"

export async function generateDailyReportPDF(records: FuelRecord[], date: string) {
  const pdf = new jsPDF("p", "mm", "a4")
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  const margin = 20
  let yPosition = 20

  // Header
  pdf.setFillColor(13, 71, 161)
  pdf.rect(0, 0, pageWidth, 40, "F")

  pdf.setTextColor(255, 255, 255)
  pdf.setFontSize(24)
  pdf.setFont("helvetica", "bold")
  pdf.text("Best UK Transport Limited", pageWidth / 2, 18, { align: "center" })

  pdf.setFontSize(14)
  pdf.setFont("helvetica", "normal")
  pdf.text("Daily Fuel Report", pageWidth / 2, 30, { align: "center" })

  yPosition = 55

  // Reset text color
  pdf.setTextColor(0, 0, 0)

  // Report Date
  pdf.setFontSize(16)
  pdf.setFont("helvetica", "bold")
  pdf.text(`Report Date: ${date}`, margin, yPosition)
  yPosition += 10

  // Summary Statistics
  const totalDiesel = records.reduce((sum, r) => sum + Number.parseFloat(r.dieselAdded || "0"), 0)
  const totalAdblue = records.reduce((sum, r) => sum + Number.parseFloat(r.adblueAdded || "0"), 0)
  const totalSpending = records.reduce((sum, r) => sum + r.grandTotal, 0)

  pdf.setFillColor(240, 240, 240)
  pdf.rect(margin, yPosition, pageWidth - 2 * margin, 8, "F")
  pdf.setFont("helvetica", "bold")
  pdf.setFontSize(12)
  pdf.text("Summary Statistics", margin + 2, yPosition + 6)
  yPosition += 13

  pdf.setFont("helvetica", "normal")
  pdf.setFontSize(11)
  pdf.text(`Total Records: ${records.length}`, margin, yPosition)
  yPosition += 7
  pdf.text(`Total Diesel: ${totalDiesel.toFixed(2)} L`, margin, yPosition)
  yPosition += 7
  pdf.text(`Total AdBlue: ${totalAdblue.toFixed(2)} L`, margin, yPosition)
  yPosition += 7
  pdf.setFont("helvetica", "bold")
  pdf.text(`Total Spending: £${totalSpending.toFixed(2)}`, margin, yPosition)
  yPosition += 15

  // Individual Records
  pdf.setFillColor(240, 240, 240)
  pdf.rect(margin, yPosition, pageWidth - 2 * margin, 8, "F")
  pdf.setFont("helvetica", "bold")
  pdf.setFontSize(12)
  pdf.text("Individual Records", margin + 2, yPosition + 6)
  yPosition += 13

  for (let i = 0; i < records.length; i++) {
    const record = records[i]

    // Check if we need a new page
    if (yPosition > pageHeight - 80) {
      pdf.addPage()
      yPosition = 20
    }

    pdf.setFont("helvetica", "bold")
    pdf.setFontSize(11)
    pdf.text(`${i + 1}. ${record.driverName} - ${record.truckRegistration.toUpperCase()}`, margin, yPosition)
    yPosition += 7

    pdf.setFont("helvetica", "normal")
    pdf.setFontSize(10)

    if (record.mileage) {
      pdf.text(`Mileage: ${record.mileage} km`, margin + 5, yPosition)
      yPosition += 6
    }

    if (record.dieselAdded) {
      pdf.text(
        `Diesel: ${record.dieselAdded} L @ £${record.dieselPrice}/L = £${record.dieselTotal.toFixed(2)}`,
        margin + 5,
        yPosition,
      )
      yPosition += 6
    }

    if (record.adblueAdded) {
      pdf.text(
        `AdBlue: ${record.adblueAdded} L @ £${record.adbluePrice}/L = £${record.adblueTotal.toFixed(2)}`,
        margin + 5,
        yPosition,
      )
      yPosition += 6
    }

    if (record.otherExpenses) {
      pdf.text(`Other: ${record.otherExpenses} = £${record.otherTotal.toFixed(2)}`, margin + 5, yPosition)
      yPosition += 6
    }

    pdf.setFont("helvetica", "bold")
    pdf.setTextColor(13, 71, 161)
    pdf.text(`Total: £${record.grandTotal.toFixed(2)}`, margin + 5, yPosition)
    pdf.setTextColor(0, 0, 0)
    yPosition += 10
  }

  // Footer
  const footerY = pdf.internal.pageSize.getHeight() - 15
  pdf.setFontSize(9)
  pdf.setTextColor(128, 128, 128)
  pdf.text("Generated by Best UK Transport Limited Fuel Tracking System", pageWidth / 2, footerY, { align: "center" })

  // Save the PDF
  const filename = `Daily_Report_${date}.pdf`
  pdf.save(filename)
}

export async function generateMonthlyReportPDF(
  records: FuelRecord[],
  month: string,
  stats: {
    totalRecords: number
    totalDiesel: string
    totalAdblue: string
    totalDieselCost: string
    totalAdblueCost: string
    totalOtherCost: string
    totalSpending: string
    avgDieselPrice: string
    avgAdbluePrice: string
    byDriver: Record<string, { count: number; total: number }>
    byTruck: Record<string, { count: number; total: number }>
  },
) {
  const pdf = new jsPDF("p", "mm", "a4")
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  const margin = 20
  let yPosition = 20

  const monthName = new Date(month + "-01").toLocaleDateString("en-GB", { month: "long", year: "numeric" })

  // Header
  pdf.setFillColor(13, 71, 161)
  pdf.rect(0, 0, pageWidth, 40, "F")

  pdf.setTextColor(255, 255, 255)
  pdf.setFontSize(24)
  pdf.setFont("helvetica", "bold")
  pdf.text("Best UK Transport Limited", pageWidth / 2, 18, { align: "center" })

  pdf.setFontSize(14)
  pdf.setFont("helvetica", "normal")
  pdf.text("Monthly Fuel Report", pageWidth / 2, 30, { align: "center" })

  yPosition = 55

  // Reset text color
  pdf.setTextColor(0, 0, 0)

  // Report Month
  pdf.setFontSize(16)
  pdf.setFont("helvetica", "bold")
  pdf.text(`Report Period: ${monthName}`, margin, yPosition)
  yPosition += 15

  // Key Statistics
  pdf.setFillColor(240, 240, 240)
  pdf.rect(margin, yPosition, pageWidth - 2 * margin, 8, "F")
  pdf.setFont("helvetica", "bold")
  pdf.setFontSize(12)
  pdf.text("Key Statistics", margin + 2, yPosition + 6)
  yPosition += 13

  pdf.setFont("helvetica", "normal")
  pdf.setFontSize(11)
  pdf.text(`Total Reports: ${stats.totalRecords}`, margin, yPosition)
  yPosition += 7
  pdf.text(`Total Diesel Consumed: ${stats.totalDiesel} L`, margin, yPosition)
  yPosition += 7
  pdf.text(`Average Diesel Price: £${stats.avgDieselPrice}/L`, margin, yPosition)
  yPosition += 7
  pdf.text(`Total AdBlue Consumed: ${stats.totalAdblue} L`, margin, yPosition)
  yPosition += 7
  pdf.text(`Average AdBlue Price: £${stats.avgAdbluePrice}/L`, margin, yPosition)
  yPosition += 12

  // Cost Breakdown
  pdf.setFillColor(240, 240, 240)
  pdf.rect(margin, yPosition, pageWidth - 2 * margin, 8, "F")
  pdf.setFont("helvetica", "bold")
  pdf.setFontSize(12)
  pdf.text("Cost Breakdown", margin + 2, yPosition + 6)
  yPosition += 13

  pdf.setFont("helvetica", "normal")
  pdf.setFontSize(11)
  pdf.text(`Diesel Costs: £${stats.totalDieselCost}`, margin, yPosition)
  yPosition += 7
  pdf.text(`AdBlue Costs: £${stats.totalAdblueCost}`, margin, yPosition)
  yPosition += 7
  pdf.text(`Other Expenses: £${stats.totalOtherCost}`, margin, yPosition)
  yPosition += 10

  pdf.setFont("helvetica", "bold")
  pdf.setFontSize(14)
  pdf.setTextColor(13, 71, 161)
  pdf.text(`Total Spending: £${stats.totalSpending}`, margin, yPosition)
  pdf.setTextColor(0, 0, 0)
  yPosition += 15

  // Statistics by Driver
  if (Object.keys(stats.byDriver).length > 0) {
    // Check if we need a new page
    if (yPosition > pageHeight - 100) {
      pdf.addPage()
      yPosition = 20
    }

    pdf.setFillColor(240, 240, 240)
    pdf.rect(margin, yPosition, pageWidth - 2 * margin, 8, "F")
    pdf.setFont("helvetica", "bold")
    pdf.setFontSize(12)
    pdf.text("Statistics by Driver", margin + 2, yPosition + 6)
    yPosition += 13

    pdf.setFont("helvetica", "normal")
    pdf.setFontSize(10)

    const sortedDrivers = Object.entries(stats.byDriver).sort(([, a], [, b]) => b.total - a.total)

    for (const [driver, data] of sortedDrivers) {
      if (yPosition > pageHeight - 30) {
        pdf.addPage()
        yPosition = 20
      }

      pdf.text(`${driver}: ${data.count} report(s) - £${data.total.toFixed(2)}`, margin, yPosition)
      yPosition += 6
    }

    yPosition += 10
  }

  // Statistics by Truck
  if (Object.keys(stats.byTruck).length > 0) {
    // Check if we need a new page
    if (yPosition > pageHeight - 100) {
      pdf.addPage()
      yPosition = 20
    }

    pdf.setFillColor(240, 240, 240)
    pdf.rect(margin, yPosition, pageWidth - 2 * margin, 8, "F")
    pdf.setFont("helvetica", "bold")
    pdf.setFontSize(12)
    pdf.text("Statistics by Truck", margin + 2, yPosition + 6)
    yPosition += 13

    pdf.setFont("helvetica", "normal")
    pdf.setFontSize(10)

    const sortedTrucks = Object.entries(stats.byTruck).sort(([, a], [, b]) => b.total - a.total)

    for (const [truck, data] of sortedTrucks) {
      if (yPosition > pageHeight - 30) {
        pdf.addPage()
        yPosition = 20
      }

      pdf.text(`${truck.toUpperCase()}: ${data.count} report(s) - £${data.total.toFixed(2)}`, margin, yPosition)
      yPosition += 6
    }
  }

  // Footer
  const footerY = pdf.internal.pageSize.getHeight() - 15
  pdf.setFontSize(9)
  pdf.setTextColor(128, 128, 128)
  pdf.text("Generated by Best UK Transport Limited Fuel Tracking System", pageWidth / 2, footerY, { align: "center" })

  // Save the PDF
  const filename = `Monthly_Report_${month}.pdf`
  pdf.save(filename)
}
